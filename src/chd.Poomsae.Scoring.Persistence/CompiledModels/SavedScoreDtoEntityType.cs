// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using chd.Poomsae.Scoring.Contracts.Dtos;

#pragma warning disable 219, 612, 618
#nullable disable

namespace chd.Poomsae.Scoring.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SavedScoreDtoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "chd.Poomsae.Scoring.Contracts.Dtos.SavedScoreDto",
                typeof(SavedScoreDto),
                baseEntityType,
                propertyCount: 9,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(SavedScoreDto).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));

            var accuracy = runtimeEntityType.AddProperty(
                "Accuracy",
                typeof(decimal),
                propertyInfo: typeof(SavedScoreDto).GetProperty("Accuracy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<Accuracy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);

            var expressionAndEnergy = runtimeEntityType.AddProperty(
                "ExpressionAndEnergy",
                typeof(decimal?),
                propertyInfo: typeof(SavedScoreDto).GetProperty("ExpressionAndEnergy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<ExpressionAndEnergy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var judgeId = runtimeEntityType.AddProperty(
                "JudgeId",
                typeof(Guid),
                propertyInfo: typeof(SavedScoreDto).GetProperty("JudgeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<JudgeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));

            var judgeName = runtimeEntityType.AddProperty(
                "JudgeName",
                typeof(string),
                propertyInfo: typeof(SavedScoreDto).GetProperty("JudgeName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<JudgeName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var rhythmAndTempo = runtimeEntityType.AddProperty(
                "RhythmAndTempo",
                typeof(decimal?),
                propertyInfo: typeof(SavedScoreDto).GetProperty("RhythmAndTempo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<RhythmAndTempo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var roundDtoId = runtimeEntityType.AddProperty(
                "RoundDtoId",
                typeof(Guid?),
                nullable: true);

            var roundId = runtimeEntityType.AddProperty(
                "RoundId",
                typeof(Guid),
                propertyInfo: typeof(SavedScoreDto).GetProperty("RoundId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<RoundId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));

            var speedAndPower = runtimeEntityType.AddProperty(
                "SpeedAndPower",
                typeof(decimal?),
                propertyInfo: typeof(SavedScoreDto).GetProperty("SpeedAndPower", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SavedScoreDto).GetField("<SpeedAndPower>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { roundDtoId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoundDtoId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var scores = principalEntityType.AddNavigation("Scores",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SavedScoreDto>),
                propertyInfo: typeof(RoundDto).GetProperty("Scores", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoundDto).GetField("<Scores>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Scores");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
