@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum


<div class="scoring-summary-container">
    <div class="device-name" @onclick="this.ChangeName"><CustomIcon FAClass="gamepad" /> @this._deviceName</div>
    <div class="scores-group accuracy">
        <ScoringSummaryItemComponent Text="Accuracy" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.Accuracy)" />
    </div>
    <div class="scores-group presentation">
        <ScoringSummaryItemComponent Text="Rhythm/Tempo/Softness" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.RhythmAndTempo)" />
        <ScoringSummaryItemComponent Text="Speed & Power" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.SpeedAndPower)" />
        <ScoringSummaryItemComponent Text="Expression of Energy" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.ExpressionAndEnergy)" />
    </div>
    <div class="scores-group finish">
        <div class="scores">
            <div class="" @onclick="this.HandleState">@_middleButtonText</div>
        </div>
    </div>

</div>
@code {
    [Inject] private ISettingManager settingManager { get; set; }
    [Inject] private IModalService modalService { get; set; }
    [Inject] private IBroadCastService broadCastService { get; set; }

    [Parameter] public ScoreDto? ChongScore { get; set; }
    [Parameter] public ScoreDto? HongScore { get; set; }
    [Parameter] public Func<Task> HandleState { get; set; }
    [Parameter] public ERunState State { get; set; }
    [Parameter] public Func<EScoringButtonColor, Task<bool>> OpenModal { get; set; }

    private string _deviceName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this._deviceName = await this.settingManager.GetName();
        await base.OnInitializedAsync();
    }
    private async Task ChangeName()
    {
        await this.modalService.Show<DeviceNameModal>("Name eingeben", new ModalOptions()
        {
        }).Result;
        this._deviceName = await this.settingManager.GetName();

        await this.broadCastService.BroadcastNameChange();

        await this.InvokeAsync(this.StateHasChanged);
    }

    private string _middleButtonText => this.State switch
    {
        ERunState.Started => "Senden",
        ERunState.Finished => "Neustart",
        _ => string.Empty
    };
}