@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions


<div class="scoring-summary-container">
    <div class="device-name" @onclick="this.ChangeName"><CustomIcon FAClass="gamepad" /> @this._deviceName</div>
    <div class="scores-group">
        <div class="scores accuracy">
            <div class="score score-hong">@this.HongScore?.Accuracy.ToDisplayString()</div>
            <div class="scores-names">Accuracy</div>
            <div class="score score-chong">@this.ChongScore?.Accuracy.ToDisplayString()</div>
        </div>
    </div>
    <div class="scores-group">
        <div class="scores presentation">
            <div class="score score-hong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Red)">@this.HongScore?.RhythmAndTempo.ToDisplayString()</div>
            <div class="scores-names">Rhythm/Tempo/Softness</div>
            <div class="score score-chong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Blue)">@this.ChongScore?.RhythmAndTempo.ToDisplayString()</div>

        </div>
        <div class="scores presentation ">
            <div class="score score-hong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Red)">@this.HongScore?.SpeedAndPower.ToDisplayString()</div>
            <div class="scores-names">Speed & Power</div>
            <div class="score score-chong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Blue)">@this.ChongScore?.SpeedAndPower.ToDisplayString()</div>

        </div>
        <div class="scores presentation">
            <div class="score score-hong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Red)">@this.HongScore?.ExpressionAndEnergy.ToDisplayString()</div>
            <div class="scores-names">Expression of Energy</div>
            <div class="score score-chong" @onclick="async() => await this.OpenModal(EScoringButtonColor.Blue)">@this.ChongScore?.ExpressionAndEnergy.ToDisplayString()</div>
        </div>
    </div>
    <div class="scores-group finish">
        <div class="scores ">
            <div class="" @onclick="this.HandleState">@_middleButtonText</div>
        </div>
    </div>

</div>
@code {
    [Inject] private ISettingManager settingManager { get; set; }
    [Inject] private IModalService modalService { get; set; }

    [Parameter] public ScoreDto? ChongScore { get; set; }
    [Parameter] public ScoreDto? HongScore { get; set; }
    [Parameter] public Func<Task> HandleState { get; set; }
    [Parameter] public ERunState State { get; set; }
    [Parameter] public Func<EScoringButtonColor, Task<bool>> OpenModal { get; set; }

    private string _deviceName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this._deviceName = await this.settingManager.GetName();
        await base.OnInitializedAsync();
    }
    private async Task ChangeName()
    {
        await this.modalService.Show<DeviceNameModal>("Name eingeben", new ModalOptions()
        {
        }).Result;
        this._deviceName = await this.settingManager.GetName();
        await this.InvokeAsync(this.StateHasChanged);
    }

    private string _middleButtonText => this.State switch
    {
        ERunState.Started => "Senden",
        ERunState.Finished => "Neustart",
        _ => string.Empty
    };
}