@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum


<div class="scoring-summary-container">
    <div class="scores-group accuracy">
        <ScoringSummaryItemComponent Text="@TextConstants.Accuracy" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.Accuracy)" />
    </div>
    <div class="scores-group presentation">
        <ScoringSummaryItemComponent Text="@TextConstants.SpeedAndPower" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.SpeedAndPower)" />
        <ScoringSummaryItemComponent Text="@TextConstants.RhythmAndTempo" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.RhythmAndTempo)" />
        <ScoringSummaryItemComponent Text="@TextConstants.ExpressionAndEnergy" OnClick="this.OpenModal" ChongScore="this.ChongScore" HongScore="this.HongScore" Property="@nameof(ScoreDto.ExpressionAndEnergy)" />
    </div>
    @if (this.ButtonContent is not null)
    {
        <div class="state-button">
            @this.ButtonContent
        </div>
    }
</div>
@code {
    [Inject] private IBroadCastService broadCastService { get; set; }

    [Parameter] public ScoreDto? ChongScore { get; set; }
    [Parameter] public ScoreDto? HongScore { get; set; }
    [Parameter] public Func<EScoringButtonColor, Task> OpenModal { get; set; }

    [Parameter] public RenderFragment? ButtonContent { get; set; }

}