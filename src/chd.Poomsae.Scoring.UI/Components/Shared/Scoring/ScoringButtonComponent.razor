@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
<div class="scoring @_css">
    @if (this.ValueBig.HasValue)
    {
        <ScoringButton IsBig="true" Value="@ValueBig.Value" OnClick="async (d)=> await OnClickButton(d)" OnRevertClick="async (d) => await this.OnClickButton(d *(-1))" />
    }
    @if (this.ValueSmall.HasValue)
    {
        <ScoringButton IsBig="false" Value="@ValueSmall.Value" OnClick="async (d)=> await OnClickButton(d)" OnRevertClick="async (d) => await this.OnClickButton(d *(-1))" />
    }
</div>

@code {
    [Parameter] public EScoringButtonColor Color { get; set; }
    [Parameter] public EScoringButtonDirection Direction { get; set; }
    [Parameter] public decimal? ValueBig { get; set; }
    [Parameter] public decimal? ValueSmall { get; set; }
    [Parameter] public Func<EScoringButtonColor, decimal, Task<TimeSpan?>> OnCalcClick { get; set; }

    [Inject] IVibrationHelper vibrationHelper { get; set; }

    private string _css => this.Color.GetCssClass() + " " + this.Direction.GetCssClass();

    private async Task OnClickButton(decimal value)
    {
        var time = await this.OnCalcClick(this.Color, value);
        if (time.HasValue)
        {
            this.vibrationHelper.Vibrate(time.Value);
        }
    }
}