@using chd.Poomsae.Scoring.Contracts.Interfaces
<div class="scoring @_css">
    <ScoringButton IsBig="true" Value="@ValueBig" OnClick="async (d)=> await OnClickButton(d)" OnRevertClick="async (d) => await this.OnClickButton(d *(-1))" />
    <ScoringButton IsBig="false" Value="@ValueSmall" OnClick="async (d)=> await OnClickButton(d)" OnRevertClick="async (d) => await this.OnClickButton(d *(-1))" />
</div>

@code {
    [Parameter] public bool IsRed { get; set; }
    [Parameter] public decimal ValueBig { get; set; }
    [Parameter] public decimal ValueSmall { get; set; }
    [Parameter] public Func<bool, decimal, Task<TimeSpan?>> OnCalcClick { get; set; }

    [Inject] IVibrationHelper vibrationHelper { get; set; }

    private string _css => this.IsRed ? "scoring-hong" : "scoring-chong";

    private async Task OnClickButton(decimal value)
    {
        var time = await this.OnCalcClick(this.IsRed, value);
        if (time.HasValue)
        {
            this.vibrationHelper.Vibrate(time.Value);
        }
    }
}