@using chd.Poomsae.Scoring.UI.Components.Shared.Prints
@using chd.Poomsae.Scoring.UI.Extensions
<div class="fighter-modal-container">
    <div class="fighter-section data">
        <div class="label"><CustomIcon FAClass="user" Style="chd.UI.Base.Contracts.Enum.EIconStyle.Regular" /></div>
        <input type="text" @bind-value="this.Fighter.Firstname" placeholder="Vorname" />
        <div class="label"></div>
        <input type="text" @bind-value="this.Fighter.Lastname" placeholder="Nachname" />
    </div>
    @if (this.Rounds.Any(a => a.Scores.Any()))
    {
        <div class="fighter-section rounds">
            <div class="section-title">Formen</div>
            @foreach (var round in this.Rounds.OrderBy(o => o.Created))
            {
                <RoundRow Reload="async () => await this.InvokeAsync(this.StateHasChanged)" Round="@round" />
            }
        </div>
    }

    <ModalBottomButtonsComponent IsNew="@IsNew" Cancel="this.Cancel" Save="this.SaveFighter" Print="this.Print" Remove="this.RemoveFighter" CancelText="@TextConstants.Cancel" SaveText="@TextConstants.SaveRound" />
</div>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }

    [Inject] IModalHandler modalService { get; set; }
    [Inject] IDeviceHandler deviceHandler { get; set; }
    [Inject] IPrintService printService { get; set; }
    [Inject] IFighterDataService fighterDataService { get; set; }


    [Parameter] public FighterDto Fighter { get; set; }
    [Parameter] public ICollection<RoundDto> Rounds { get; set; } = [];
    [Parameter] public bool IsNew { get; set; }

    private Task Cancel() => this.ModalInstance.CancelAsync();


    private async Task Print()
    {
        var fighter = await this.fighterDataService.GetFighter(this.Fighter.Id);
        await this.printService.PrintComponentAsync<FighterPrint>(new Dictionary<string, object?>() { { nameof(FighterPrint.Fighter), fighter } }, this.Fighter.Lastname);
    }

    private async Task RemoveFighter()
    {
        var res = await this.modalService.ShowYesNoDialog(TextConstants.RemoveFighterQuestion, this.deviceHandler.IsiOS);
        if (res is chd.UI.Base.Contracts.Enum.EDialogResult.Yes)
        {
            await this.ModalInstance.CloseAsync(ModalResult.Ok(new ModalResultDto<FighterDto>(this.Fighter, EDataAction.Delete)));
        }
    }
    private Task SaveFighter() => this.ModalInstance.CloseAsync(ModalResult.Ok(new ModalResultDto<FighterDto>(this.Fighter, this.IsNew ? EDataAction.Add : EDataAction.Update)));

}