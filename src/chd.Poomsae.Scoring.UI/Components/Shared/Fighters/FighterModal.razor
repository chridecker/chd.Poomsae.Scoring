@using chd.Poomsae.Scoring.UI.Extensions
<div class="fighter-modal-container">
    <div class="fighter-section data">
        <div class="label"><CustomIcon FAClass="user" Style="chd.UI.Base.Contracts.Enum.EIconStyle.Regular" /></div>
        <input type="text" @bind-value="this.Fighter.Firstname" placeholder="Vorname" />
        <div class="label"></div>
        <input type="text" @bind-value="this.Fighter.Lastname" placeholder="Nachname" />
    </div>
    @if (this.Rounds.Any(a => a.Scores.Any()))
    {
        <div class="fighter-section rounds">
            <div class="section-title">Läufe</div>
            @foreach (var round in this.Rounds.OrderBy(o => o.Created))
            {
                <RoundRow Reload="async () => await this.InvokeAsync(this.StateHasChanged)" Round="@round" />
            }
        </div>
    }
    <div class="fighter-section buttons">
        @if (this.IsNew)
        {
            <button class="btn btn-secondary" @onclick="this.Cancel">Abbrechen</button>
            <button class="btn btn-primary" @onclick="async () => await this.ModalInstance.CloseAsync(ModalResult.Ok(new ModalResultDto<FighterDto>(this.Fighter, EDataAction.Add)))">Speichern</button>
        }
        else
        {
            <IconButton FAClass="floppy-disk" OnClick="this.SaveFighter" />
            <IconButton FAClass="print" OnClick="this.Print" />
            <IconButton FAClass="trash" OnClick="this.RemoveFighter" />
            <IconButton FAClass="arrow-turn-left" OnClick="this.Cancel" />
        }
    </div>
</div>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }

    [Inject] IModalHandler modalService { get; set; }

    [Parameter] public FighterDto Fighter { get; set; }
    [Parameter] public ICollection<RoundDto> Rounds { get; set; } = [];
    [Parameter] public bool IsNew { get; set; }

    private async Task Cancel()
    {
        await this.ModalInstance.CancelAsync();
    }

    private async Task Print()
    {
        await this.modalService.ShowDialog("Drucken noch nicht umgesetzt", chd.UI.Base.Contracts.Enum.EDialogButtons.OK);
    }

    private async Task RemoveFighter()
    {
        var res = await this.modalService.ShowYesNoDialog(TextConstants.RemoveFighterQuestion);
        if (res is chd.UI.Base.Contracts.Enum.EDialogResult.Yes)
        {
            await this.ModalInstance.CloseAsync(ModalResult.Ok(new ModalResultDto<FighterDto>(this.Fighter, EDataAction.Delete)));
        }
    }
    private async Task SaveFighter()
    {
        await this.ModalInstance.CloseAsync(ModalResult.Ok(new ModalResultDto<FighterDto>(this.Fighter, EDataAction.Update)));
    }

}