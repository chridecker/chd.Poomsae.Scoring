@using chd.UI.Base.Contracts.Enum
@if (this.deviceHandler.IsiOS)
{
    <div class="global-back-button ios @(this._showBackButton ? "" : " hide ") ">
        <div class="ios-nav-arrow" @onclick="this.HandleBack">
            <CustomIcon FAClass="chevron-left" Style="EIconStyle.Regular" />@_backTitle
        </div>
        <div class="ios-nav-right" @onclick:stopPropagation>
            @if (this.RightClick is not null)
            {
                <IconButton FAClass="@this._iconRight" Style="EIconStyle.Regular" OnClick="this.RightClick" />
            }
        </div>
    </div>
    <CascadingValue IsFixed="true" Value="this">
        @ChildContent
    </CascadingValue>
}
else
{
    <div class="global-back-button @(this._showBackButton ? "" : " hide ")" @onclick="this.HandleBack"><CustomIcon FAClass="arrow-left" /></div>
    <CascadingValue IsFixed="true" Value="this">
        @ChildContent
    </CascadingValue>
}
@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Inject] IDeviceHandler deviceHandler { get; set; }
    [Inject] INavigationHandler navigationHandler { get; set; }


    private string _iconRight = "ellipsis";

    private string _backTitle;
    private string _title;
    public Func<Task> RightClick { get; set; }

    private bool _showBackButton = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public async Task SetTitle(string title, string backTitle, string icon = "ellipsis")
    {
        this._title = title;
        this._backTitle = backTitle;
        this._iconRight = icon;
        await this.InvokeAsync(this.StateHasChanged);
    }

    public async Task SetBackButton(bool value)
    {
        this._showBackButton = value;
        await this.InvokeAsync(this.StateHasChanged);
    }

    private void HandleBack() => this.navigationHandler.NavigateBack(false);


}