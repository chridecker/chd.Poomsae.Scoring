@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
@if (!this.ConnectedDevices.Any()) { return; }
<div class="judge-result @__css">
    @foreach (var judge in this.ConnectedDevices)
    {
        <div class="judge" @onclick="async ()=> await this.ShowJudgeDetail(judge.Key, judge.Value)">
            <div class="score accuracy @__cssDiscardAccuracy(Result(judge.Key, this.IsRed)?.Accuracy) ">@((Result(judge.Key, this.IsRed)?.Accuracy.ToDisplayString() ?? "-"))</div>
            <div class="score presentation @__cssDiscardPresentation(Result(judge.Key,this.IsRed)?.Presentation)">@((Result(judge.Key, this.IsRed)?.Presentation.ToDisplayString() ?? "-"))</div>
        </div>
    }
</div>

@code {
    [Inject] IResultService resultService { get; set; }
    [Inject] IModalService modalService { get; set; }


    [Parameter] public bool IsRed { get; set; }
    [Parameter] public Dictionary<Guid, string> ConnectedDevices { get; set; } = [];

    private string __css => this.IsRed ? "hong" : "chong";
    private string __cssDiscardAccuracy(decimal? val) => this.IsDiscardValueAccuracy(val) ? "discard" : "";
    private string __cssDiscardPresentation(decimal? val) => this.IsDiscardValuePresentation(val) ? "discard" : "";

    private ScoreDto Result(Guid id, bool isRed) => this.resultService.Result.Results.TryGetValue(id, out var res) ? (isRed ? res.HongScore : res.ChongScore) : null;

    private async Task ShowJudgeDetail(Guid id, string name)
    {
        var param = new ModalParameters()
        {
            {nameof(JudgeDetailModal.Chong),this.Result(id,false)},
            {nameof(JudgeDetailModal.Hong),this.Result(id,true)}
        };
        var opt = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        await this.modalService.Show<JudgeDetailModal>(name, param, opt).Result;
    }

    private bool IsDiscardValueAccuracy(decimal? val)
    {
        if (!val.HasValue || this.resultService.Result.Results.Values.Count <= 3) { return false; }

        var minVal = this.resultService.Result.Results.Values.Select(s => this.IsRed ? s.HongScore : s.ChongScore).Min(s => s.Accuracy);
        var maxVal = this.resultService.Result.Results.Values.Select(s => this.IsRed ? s.HongScore : s.ChongScore).Max(s => s.Accuracy);
        return val == minVal || val == maxVal;
    }

    private bool IsDiscardValuePresentation(decimal? val)
    {
        if (!val.HasValue || this.resultService.Result.Results.Values.Count <= 3) { return false; }

        var minVal = this.resultService.Result.Results.Values.Select(s => this.IsRed ? s.HongScore : s.ChongScore).Min(s => s.Presentation);
        var maxVal = this.resultService.Result.Results.Values.Select(s => this.IsRed ? s.HongScore : s.ChongScore).Max(s => s.Presentation);
        return val == minVal || val == maxVal;
    }

}