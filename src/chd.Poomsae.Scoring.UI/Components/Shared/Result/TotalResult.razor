@implements IDisposable
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
<div class="total @__css">
    <div class="part-score accuracy">
        <div class="part-score-title">@TextConstants.Accuracy</div>
        <div class="part-score-value">@(this.__resultAccuracy.ToDisplayString(string.Empty))</div>
    </div>
    <div class="part-score presentation">
        <div class="part-score-title">@TextConstants.Presentation</div>
        <div class="part-score-value"> @(this.__resultPresentation.ToDisplayString(string.Empty))</div>
    </div>
    <div class="overall">@(this.__result.ToDisplayString())</div>
</div>

@code {
    [Inject] IResultService resultService { get; set; }
    [Parameter] public EScoringButtonColor Color { get; set; }

    private decimal? __result => this.Color is EScoringButtonColor.Red ? this.resultService.HongTotal : this.resultService.ChongTotal;
    private decimal? __resultAccuracy => this.Color is EScoringButtonColor.Red ? this.resultService.HongAccuracy : this.resultService.ChongAccuracy;
    private decimal? __resultPresentation => this.Color is EScoringButtonColor.Red ? this.resultService.HongPresentation : this.resultService.ChongPresentation;

    private string __css => (this.Color is EScoringButtonColor.Red ? "hong" : this.Color is EScoringButtonColor.Blue ? "chong" : "") + " " + (this.__result.HasValue ? "" : " inactive ");


    protected override Task OnInitializedAsync()
    {
        this.resultService.ResultReceived += this.OnResult;
        return base.OnInitializedAsync();
    }

    private async void OnResult(object? sender, EventArgs e)
    {
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        this.resultService.ResultReceived -= this.OnResult;
    }
}