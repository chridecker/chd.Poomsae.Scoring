@page "/eliminationscore"
@inherits BaseScoringComponent<EliminationRunDto>
@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared.Scoring
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum

@if (runDto is null) { return; }

<div class="run-container">
    <div class="fighter-container">
        <FighterScore Score="@runDto.HongScore" IsRed="true" />
        <FighterScore Score="@runDto.ChongScore" IsRed="false">
            <ButtonContent>
                <StateButton State="@runDto.State" HandleState="this.HandleClick" />
            </ButtonContent>
            </FighterScore>
    </div>
    <div class="scoring-container">
        <ScoringButtonComponent Direction="EScoringButtonDirection.Left" Color="EScoringButtonColor.Red" ValueBig="0.1m" ValueSmall="0.3m" OnCalcClick="this.CalcScore" />
        <div class="scoring-middle">
            <ScoringSummaryComponent OpenModal="this.OpenPresentationModal" ChongScore="@runDto.ChongScore" HongScore="@runDto.HongScore"  />
        </div>
        <ScoringButtonComponent Direction="EScoringButtonDirection.Right" Color="EScoringButtonColor.Blue" ValueBig="0.1m" ValueSmall="0.3m" OnCalcClick="this.CalcScore" />
    </div>
</div>


@code {

    protected override EliminationRunDto CreateDto() => this._runService.StartEliminiationRun();

    protected override ScoreDto HandleScore(EScoringButtonColor color) => color is EScoringButtonColor.Red ? this.runDto.HongScore : color is EScoringButtonColor.Blue ? this.runDto.ChongScore : null;
    protected override async Task<bool> HandleStartedState()
    {
        if (!this.runDto.ChongScore.Presentation.HasValue
           && !await this.OpenPresentationModal(EScoringButtonColor.Blue))
        {
            return false;
        }
        if (!this.runDto.HongScore.Presentation.HasValue
        && !await this.OpenPresentationModal(EScoringButtonColor.Red))
        {
            return false;
        }
        return true;
    }

    private async Task<bool> OpenPresentationModal(EScoringButtonColor color)
    {
        if (this.runDto.State is not ERunState.Started) { return false; }

        if (color is EScoringButtonColor.Blue)
        {
            var modalResultBlue = await this._modal.Show<ScorePresentationModal>
                (TextConstants.Blue, new ModalParameters()
                        {
                    {nameof(ScorePresentationModal.Color),color}
                        }, new ModalOptions()
                        {
                            Size = ModalSize.ExtraLarge,
                        }).Result;
            if (modalResultBlue.Cancelled)
            {
                return false;
            }
            else if (modalResultBlue.Data is PresentatioScoreDto scoreDto)
            {
                this.runDto.ChongScore.SpeedAndPower = scoreDto.SpeedAndPower;
                this.runDto.ChongScore.RhythmAndTempo = scoreDto.RhythmAndTempo;
                this.runDto.ChongScore.ExpressionAndEnergy = scoreDto.ExpressionAndEnergy;
            }
            await this.InvokeAsync(this.StateHasChanged);
            return true;
        }
        else
        {
            var modalResultRed = await this._modal.Show<ScorePresentationModal>
                (TextConstants.Red, new ModalParameters(){
            {nameof(ScorePresentationModal.Color),color}
                                                }, new ModalOptions()
                                                {
                                                    Size = ModalSize.ExtraLarge,
                                                }).Result;
            if (modalResultRed.Data is PresentatioScoreDto scoreDto2)
            {
                this.runDto.HongScore.SpeedAndPower = scoreDto2.SpeedAndPower;
                this.runDto.HongScore.RhythmAndTempo = scoreDto2.RhythmAndTempo;
                this.runDto.HongScore.ExpressionAndEnergy = scoreDto2.ExpressionAndEnergy;
                await this.InvokeAsync(this.StateHasChanged);
                return true;
            }
        }
        await this.InvokeAsync(this.StateHasChanged);
        return false;
    }
}
