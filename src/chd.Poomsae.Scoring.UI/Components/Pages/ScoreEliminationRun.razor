@page "/eliminationscore"
@implements IDisposable
@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Shared.Scoring
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum

@if (runDto is null) { return; }

<div class="run-container">
    <div class="fighter-container">
        <FighterScore Score="@runDto.HongScore" IsRed="true" />
        <FighterScore Score="@runDto.ChongScore" IsRed="false" />
    </div>
    <div class="scoring-container">
        <ScoringButtonComponent Direction="EScoringButtonDirection.Left" Color="EScoringButtonColor.Red" ValueBig="0.3m" ValueSmall="0.1m" OnCalcClick="this.CalcScore" />
        <div class="scoring-middle">
            <ScoringSummaryComponent OpenModal="this.OpenPresentationModal" ChongScore="@runDto.ChongScore" HongScore="@runDto.HongScore" State="@runDto.State" HandleState="this.HandleClick" />
        </div>
        <ScoringButtonComponent Direction="EScoringButtonDirection.Right" Color="EScoringButtonColor.Blue" ValueBig="0.3m" ValueSmall="0.1m" OnCalcClick="this.CalcScore" />
    </div>
</div>


@code {
    [Inject] IModalService _modal { get; set; }
    [Inject] IStartRunService _runService { get; set; }
    [Inject] IBroadCastService broadCastService { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }

    private EliminationRunDto runDto;

    private IDisposable _registerLocationChangeHandler;
    protected override async Task OnInitializedAsync()
    {
        this._registerLocationChangeHandler = this._navigationManager.RegisterLocationChangingHandler(OnLocationChanging);

        this.runDto = this._runService.StartEliminiationRun();

        await base.OnInitializedAsync();
    }

    private async Task<TimeSpan?> CalcScore(EScoringButtonColor color, decimal value)
    {
        if (this.runDto.State is not ERunState.Started) { return null; }
        this.CalculateAccuracyScore(color is EScoringButtonColor.Red ? this.runDto.HongScore : this.runDto.ChongScore, value);
        await this.InvokeAsync(this.StateHasChanged);
        return Math.Abs(value) == 0.1m ? TimeSpan.FromMilliseconds(200) : TimeSpan.FromMilliseconds(300);
    }

    private void CalculateAccuracyScore(ScoreDto dto, decimal value)
    {
        if (dto.Accuracy - value <= 0)
        {
            dto.Accuracy = 0;
        }
        else if (dto.Accuracy - value >= ScoreConstants.MaxAccuracy)
        {
            dto.Accuracy = ScoreConstants.MaxAccuracy;
        }
        else
        {
            dto.Accuracy -= value;
        }
    }

    private async Task HandleClick()
    {
        if (this.runDto.State is ERunState.Started)
        {
            if (!this.runDto.ChongScore.Presentation.HasValue
            && !await this.OpenPresentationModal(false))
            {
                return;
            }
            if (!this.runDto.HongScore.Presentation.HasValue
            && !await this.OpenPresentationModal(true))
            {
                return;
            }
            this.broadCastService.BroadcastResult(this.runDto);
            this.runDto.State = ERunState.Finished;
        }
        else if (this.runDto.State is ERunState.Finished)
        {
            this.broadCastService.ResetScore();
            this.runDto = this._runService.StartEliminiationRun();
        }
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task<bool>
    OpenPresentationModal(bool isRed)
    {
        if (this.runDto.State is not ERunState.Started) { return false; }

        if (!isRed)
        {
            var modalResultBlue = await this._modal.Show<ScorePresentationModal>
                ("Blue", new ModalOptions()
                    {
                        Size = ModalSize.ExtraLarge,
                    }).Result;
            if (modalResultBlue.Cancelled)
            {
                return false;
            }
            else if (modalResultBlue.Data is PresentatioScoreDto scoreDto)
            {
                this.runDto.ChongScore.SpeedAndPower = scoreDto.SpeedAndPower;
                this.runDto.ChongScore.RhythmAndTempo = scoreDto.RhythmAndTempo;
                this.runDto.ChongScore.ExpressionAndEnergy = scoreDto.ExpressionAndEnergy;
            }
            return true;
        }
        else
        {
            var modalResultRed = await this._modal.Show<ScorePresentationModal>
                ("Red", new ModalParameters(){
            {nameof(ScorePresentationModal.IsRed),true}
                            }, new ModalOptions()
                            {
                                Size = ModalSize.ExtraLarge,
                            }).Result;
            if (modalResultRed.Data is PresentatioScoreDto scoreDto2)
            {
                this.runDto.HongScore.SpeedAndPower = scoreDto2.SpeedAndPower;
                this.runDto.HongScore.RhythmAndTempo = scoreDto2.RhythmAndTempo;
                this.runDto.HongScore.ExpressionAndEnergy = scoreDto2.ExpressionAndEnergy;
                return true;
            }
        }
        await this.InvokeAsync(this.StateHasChanged);
        return false;
    }

    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (this.runDto.State is ERunState.Started)
        {
            var res = await this._modal.ShowDialog("Wollen Sie die Seite wirklich verlassen?", EDialogButtons.YesNo);
            if (res == EDialogResult.No)
            {
                context.PreventNavigation();
            }
        }
    }

    public void Dispose()
    {
        if (this._registerLocationChangeHandler is not null)
        {
            this._registerLocationChangeHandler.Dispose();
        }
    }
}
