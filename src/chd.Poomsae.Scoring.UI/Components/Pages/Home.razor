@page "/"
@using chd.Poomsae.Scoring.UI.Components.Layout
@using chd.Poomsae.Scoring.UI.Components.Shared
@using chd.Poomsae.Scoring.UI.Components.Shared.Licensing
@inherits PageComponentBase<Guid,int>

<div class="home-container">
    <div class="home-card" @onclick="() => this.GoTo(SINGLE)">
        <div class="logo"><CustomIcon FAClass="person" /></div>
        <div class="text">@TextConstants.Single</div>
    </div>
    <div class="home-card" @onclick="() => this.GoTo(ELIM)">
        <div class="logo"><CustomIcon FAClass="people" /></div>
        <div class="text">@TextConstants.Eliminiation</div>
    </div>
    <div class="home-card" @onclick="() => this.GoTo(RESULTS)">
        <div class="logo"><CustomIcon FAClass="ranking-star" /></div>
        <div class="text">@TextConstants.Results</div>
    </div>
    <ChdAuthorizeView TRightId="int" TUserId="Guid" Rights="[RightConstants.HAS_FIGHTERS]">
        <div class="home-card" @onclick="() => this.GoTo(FIGHTERS)">
            <div class="logo"><CustomIcon FAClass="users" /></div>
            <div class="text">@TextConstants.Fighters</div>
        </div>
    </ChdAuthorizeView>
    <ChdAuthorizeView TRightId="int" TUserId="Guid" Rights="[RightConstants.HAS_FIGHTERS]">
        <div class="home-card" @onclick="() => this.GoTo(ROUND)">
            <div class="logo"><CustomIcon FAClass="uniform-martial-arts" /></div>
            <div class="text">@TextConstants.Scores</div>
        </div>
    </ChdAuthorizeView>
    @*  <div class="home-card" @onclick="async () => await this.ManageLicense()">
        <div class="logo"><CustomIcon FAClass="badge-check" /></div>
        <div class="text">@TextConstants.License</div>
    </div> *@
</div>


@code {
    const string SINGLE = "singlescore";
    const string ELIM = "eliminationscore";
    const string RESULTS = "results";
    const string FIGHTERS = "fighters";
    const string ROUND = "round";

    [Inject] INavigationHandler _navigationHandler { get; set; }
    [Inject] IModalHandler _modalService { get; set; }
    [Inject] IDeviceHandler _deviceHandler { get; set; }
    [CascadingParameter] CascadingBackButton _backButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this._backButton.BackTitle = string.Empty;
        this._backButton.Title = string.Empty;
        this._backButton.RightClick = null;

        if (this._deviceHandler.IsiOS)
        {
            await this._backButton.SetBackButton(true);
        }

        await this._deviceHandler.ResetOrientation();
        await this._backButton.SetBackButton(false);

        await base.OnInitializedAsync();
    }

    private void GoTo(string path)
    {
        this._navigationHandler.NavigateTo(path, false);
    }

    private async Task ManageLicense()
    {
        _ = await this._modalService.Show<LicenseModal>(new ModalOptions
        {
            Size = ModalSize.ExtraLarge,
            HideHeader = true
        }).Result;

    }
}