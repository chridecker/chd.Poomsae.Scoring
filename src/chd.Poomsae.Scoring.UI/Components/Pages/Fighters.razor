@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared.Fighters
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum
@inherits BaseClientComponent
@page "/fighters"

<div class="fighters-container">
    @foreach (var fighter in this.fighterDataService.Fighters.OrderBy(o => o.Lastname).ThenBy(o => o.Firstname))
    {
        <FighterRow Reload="async ()=> await this.InvokeAsync(this.StateHasChanged)" Fighter="@fighter" SetBlue="this.SetBlue" SetRed="this.SetRed" />
    }
</div>

<FloatingActionNavigation FAIconActive="user-plus" TextActive="@TextConstants.AddFighter" OnClick="this.AddFighter">
    <FloatingActionButton FAClass="magnifying-glass-plus" Title="@TextConstants.AddDeviceAuto" OnClick="this.Search" />
    @if (this._connectedDevices.Any())
    {
        <FloatingActionButton FAClass="eraser" Title="@TextConstants.RemoveDevices" OnClick="this.Clear" />
        <FloatingActionButton FAClass="laptop-slash" Title="@TextConstants.RemoveDevice" OnClick="this.RemoveDevices" />
    }
    <FloatingActionButton FAClass="magnifying-glass" Title="@TextConstants.SearchDevices" OnClick="this.Discover" />
</FloatingActionNavigation>


@code {

    [Inject] IFighterDataService fighterDataService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this._deviceHandler.ResetOrientation();

        await base.OnInitializedAsync();
    }

    protected override Task Clear()
    {
        return base.Clear();
    }

    protected override async Task OnResultReceived(ScoreReceivedEventArgs e)
    {
        await this.fighterDataService.HandleResult(e);

        await this.InvokeAsync(this.StateHasChanged);
    }

    protected override async Task OnDeviceFound(DeviceDto e)
    {
        await base.OnDeviceFound(e);
        await this.Send(e);

    }

    protected override async Task OnDeviceDisconncted(DeviceDto e)
    {
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task AddFighter()
    {
        var fighter = new FighterDto();
        var res = await this.modalService.Show<FighterModal>("Teilnehmer", new ModalParameters() {
        { nameof(FighterModal.Fighter), fighter },
        {nameof(FighterModal.IsNew),true}
    }, new ModalOptions()
    {
        HideHeader = true,
        Size = ModalSize.ExtraLarge,
        Position = ModalPosition.TopCenter,
    }).Result;
        if (res.Confirmed && res.Data is FighterModalResultDto dto
        && dto.Action is EDataAction.Add)
        {
            await this.fighterDataService.AddFighter(dto.Fighter);
            await this.InvokeAsync(this.StateHasChanged);
        }
    }

    private async Task SetBlue(FighterDto fighterDto)
    {
        if (fighterDto is null && this.fighterDataService.CurrentBlue is not null)
        {
            await this.fighterDataService.CloseRound(this.fighterDataService.CurrentBlue);
        }

        if (this.fighterDataService.CurrentRed?.Id == fighterDto?.Id)
        {
            this.fighterDataService.CurrentRed = null;
        }
        this.fighterDataService.CurrentBlue = fighterDto;

        if (fighterDto is not null)
        {
            await this.fighterDataService.CreateRound(fighterDto);
        }

        foreach (var dev in this._connectedDevices)
        {
            await this.Send(dev.Value);
        }
        await this.InvokeAsync(this.StateHasChanged);
    }
    private async Task SetRed(FighterDto fighterDto)
    {
        if (fighterDto is null && this.fighterDataService.CurrentRed is not null)
        {
            await this.fighterDataService.CloseRound(this.fighterDataService.CurrentRed);
        }

        if (this.fighterDataService.CurrentBlue?.Id == fighterDto?.Id)
        {
            this.fighterDataService.CurrentBlue = null;
        }
        this.fighterDataService.CurrentRed = fighterDto;

        if (fighterDto is not null)
        {
            await this.fighterDataService.CreateRound(fighterDto);
        }

        foreach (var dev in this._connectedDevices)
        {
            await this.Send(dev.Value);
        }
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task Send(DeviceDto device)
    {
        await this.broadcastClient.SendFighter(this.fighterDataService.CurrentBlue, EScoringButtonColor.Blue, device);
        await this.broadcastClient.SendFighter(this.fighterDataService.CurrentRed, EScoringButtonColor.Red, device);
    }

}
