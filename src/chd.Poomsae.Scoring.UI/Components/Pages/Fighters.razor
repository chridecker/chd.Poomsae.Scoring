@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared
@using chd.Poomsae.Scoring.UI.Components.Shared.Fighters
@using chd.Poomsae.Scoring.UI.Components.Shared.Prints
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Components.General.Search
@using chd.UI.Base.Contracts.Enum
@inherits BaseClientComponent
@page "/fighters"

<div class="fighters-container">
    @foreach (var fighter in this.fighterDataService.Fighters.OrderBy(o => o.Lastname).ThenBy(o => o.Firstname))
    {
        <FighterRow Reload="async () => await this.InvokeAsync(this.StateHasChanged)" Fighter="@fighter" SetBlue="this.SetBlue" SetRed="this.SetRed" />
    }
</div>

<FloatingActionNavigation FAIconActive="user-plus" TextActive="@TextConstants.AddFighter" OnClick="this.AddFighter">
    <FloatingActionButton FAClass="ranking-star" Title="@TextConstants.PrintResult" OnClick="this.ChooseForResult" />
</FloatingActionNavigation>


@code {

    [Inject] IFighterDataService fighterDataService { get; set; }
    [Inject] IPrintService printService { get; set; }

    protected override string _navigationTitle => TextConstants.Fighters;

    protected override async Task OnInitializedAsync()
    {
        this._backButton.RightClick = this.AddFighter;
        await this._backButton.SetTitle(this._navigationTitle, this._navigationBackTitle, "plus");

        await this._deviceHandler.ResetOrientation();

        await base.OnInitializedAsync();
    }

    protected override Task Clear() => base.Clear();

    protected override Task OnResultReceived(ScoreReceivedEventArgs e) => this.InvokeAsync(this.StateHasChanged);

    protected override Task OnDeviceDisconncted(DeviceDto e) => this.InvokeAsync(this.StateHasChanged);

    private async Task ChooseForResult()
    {
        var parameters = new ModalParameters
            {
                { nameof(MultiSelectModalComponent<FighterDto>.Items), this.fighterDataService.Fighters},
                { nameof(MultiSelectModalComponent<FighterDto>.RenderType),typeof(FighterSearchItem) },
                { nameof(MultiSelectModalComponent<FighterDto>.RenderParameterDict),(FighterDto dto)=> MultiSelectModalComponent<FighterDto>.CreateRenderParameterDict(dto,((x)=> nameof(FighterSearchItem.Fighter),(x)=>x))},
                { nameof(MultiSelectModalComponent<FighterDto>.SelectAllText), TextConstants.ChooseAll},
                { nameof(MultiSelectModalComponent<FighterDto>.SelectNoneText), TextConstants.ChooseNone},
                { nameof(MultiSelectModalComponent<FighterDto>.ShowCount), false},

                { nameof(MultiSelectModalComponent<FighterDto>.ConfirmText), TextConstants.Submit},
            };
        var modalInstance = this._modalService.Show<MultiSelectModalComponent<FighterDto>>(TextConstants.SearchFighter, parameters);

        var result = await modalInstance.Result;
        if (result.Confirmed && result.Data is List<FighterDto> fighterLst
            && fighterLst.Any())
        {
            var name = await this._modalService.ShowSmallInputDialog(TextConstants.ResultList, this._deviceHandler.IsiOS, TextConstants.ClassNamePlaceholder); // "Jugend LK1  - U18";
            name = string.IsNullOrWhiteSpace(name) ? TextConstants.ResultList : name;
            await this.printService.PrintComponentAsync<ClassPrint>(new Dictionary<string, object?>() { {
                nameof(ClassPrint.Date), DateTime.Now },
            { nameof(ClassPrint.ClassTitle),name },
            { nameof(ClassPrint.Fighters),fighterLst}
            }, name);

        }
    }

    private async Task AddFighter()
    {
        var fighter = new FighterDto();
        var res = await this._modalService.Show<FighterModal>(TextConstants.Fighters, new ModalParameters() {
        { nameof(FighterModal.Fighter), fighter },
        {nameof(FighterModal.IsNew),true}
    }, new ModalOptions()
    {
        Size = ModalSize.ExtraLarge,
    }).Result;
        if (res.Confirmed && res.Data is ModalResultDto<FighterDto> dto
        && dto.Action is EDataAction.Add)
        {
            await this.fighterDataService.AddFighter(dto.Data);
            await this.InvokeAsync(this.StateHasChanged);
        }
    }

    private async Task SetBlue(FighterDto fighterDto)
    {
        await this.fighterDataService.SetBlue(fighterDto);
        await this.InvokeAsync(this.StateHasChanged);
    }
    private async Task SetRed(FighterDto fighterDto)
    {
        await this.fighterDataService.SetRed(fighterDto);
        await this.InvokeAsync(this.StateHasChanged);
    }
}
