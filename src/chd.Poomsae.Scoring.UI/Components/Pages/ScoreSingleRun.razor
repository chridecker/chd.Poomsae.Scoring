@page "/singlescore"
@inherits BaseScoringComponent<SingleRunDto>
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared.Scoring
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum

@if (this.runDto is null) { return; }

<div class="single-run-container">
    <div class="fighter-container">
        <FighterScore Score="@runDto.Score" />
        <div class="change-button button-@(this.runDto.Color is EScoringButtonColor.Red ? "blue" : "red")" @onclick="this.ChangeColor">
            <CustomIcon FAClass="rotate" />
        </div>
    </div>
    <div class="scoring-container">
        <ScoringButtonComponent Direction="EScoringButtonDirection.Left" Color="this.runDto.Color" ValueBig="0.3m" OnCalcClick="this.CalcScore" />
        <div class="scoring-middle">
            <ScoringSummaryComponent OpenModal="this.OpenPresentationModal"
                                     ChongScore="@(this.runDto.Color is EScoringButtonColor.Blue ?  runDto.Score : null)"
                                     HongScore="@(this.runDto.Color is EScoringButtonColor.Red ?  runDto.Score : null)"
                                     State="@runDto.State" HandleState="this.HandleClick" />
        </div>
        <ScoringButtonComponent Direction="EScoringButtonDirection.Right" Color="this.runDto.Color" ValueBig="0.1m" OnCalcClick="this.CalcScore" />
    </div>
</div>


@code {
    protected override SingleRunDto CreateDto() => this._runService.StartSingleRun(this.runDto?.Color ?? EScoringButtonColor.Blue);

    protected override ScoreDto HandleScore(EScoringButtonColor color) => this.runDto.Score;

    protected override async Task<bool> HandleStartedState()
    {
        if (!this.runDto.Score.Presentation.HasValue)
        {
            await this.OpenPresentationModal(this.runDto.Color);
        }
        return true;
    }


    private async Task ChangeColor()
    {
        var res = await this._modal.ShowDialog(TextConstants.ChangeColorQuestion, EDialogButtons.YesNo);
        if (res is EDialogResult.No) { return; }
        this.runDto = this._runService.StartSingleRun(__colorChange());

        await this.InvokeAsync(this.StateHasChanged);
    }

    private EScoringButtonColor __colorChange() => (this.runDto is null, this.runDto?.Color ?? EScoringButtonColor.None) switch
    {
        (false, EScoringButtonColor.Blue) => EScoringButtonColor.Red,
        _ => EScoringButtonColor.Blue
    };


    private async Task<bool> OpenPresentationModal(EScoringButtonColor color)
    {
        if (this.runDto.State is not ERunState.Started) { return false; }
        var modalResultBlue = await this._modal.Show<ScorePresentationModal>(TextConstants.Presentation, new ModalParameters(){
                {nameof(ScorePresentationModal.Color),color} }, new ModalOptions()
                {
                    Size = ModalSize.ExtraLarge,
                }).Result;
        if (modalResultBlue.Cancelled)
        {
            return false;
        }
        else if (modalResultBlue.Data is PresentatioScoreDto scoreDto)
        {
            this.runDto.Score.SpeedAndPower = scoreDto.SpeedAndPower;
            this.runDto.Score.RhythmAndTempo = scoreDto.RhythmAndTempo;
            this.runDto.Score.ExpressionAndEnergy = scoreDto.ExpressionAndEnergy;
        }
        await this.InvokeAsync(this.StateHasChanged);
        return true;
    }
}
