@page "/singlescore"
@inherits BaseScoringComponent<SingleRunDto>
@using chd.Poomsae.Scoring.Contracts.Constants
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Enums
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared.Licensing
@using chd.Poomsae.Scoring.UI.Components.Shared.Scoring
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum

<ChdAuthorizeView TRightId="int" TUserId="Guid" Rights="new int[] { RightConstants.IS_ALLOWED }">
    <Authorized>
        @if (this.runDto is null) { return; }
        <div class="single-run-container">
            <div class="fighter-container @(this.runDto.Color is EScoringButtonColor.Red ? "red" : this.runDto.Color is EScoringButtonColor.Blue ? "blue" : "")">
                <div class="change-button button-@(this.runDto.Color is EScoringButtonColor.Red ? "blue" : "red")" @onclick="this.ChangeColor">
                    <CustomIcon FAClass="rotate" />
                </div>
                <FighterScore FighterName="@this.fighterName" Score="@runDto.Score">
                    <ButtonContent>
                        <UserButton />
                    </ButtonContent>
                </FighterScore>

            </div>
            <div class="scoring-container">
                <ScoringButtonComponent Direction="EScoringButtonDirection.Left" Color="this.runDto.Color" ValueBig="0.3m" OnCalcClick="this.CalcScore" />
                <ScoringSummaryComponent State="@this.runDto.State" OpenModal="this.OpenPresentationModal"
                                         ChongScore="@(this.runDto.Color is EScoringButtonColor.Blue ?  runDto.Score : null)"
                                         HongScore="@(this.runDto.Color is EScoringButtonColor.Red ?  runDto.Score : null)">
                    <ButtonContent>
                        <StateButton State="@runDto.State" HandleState="this.HandleClick" />
                    </ButtonContent>
                </ScoringSummaryComponent>
                <ScoringButtonComponent Direction="EScoringButtonDirection.Right" Color="this.runDto.Color" ValueBig="0.1m" OnCalcClick="this.CalcScore" />
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NoLicenseComponent />
    </NotAuthorized>
</ChdAuthorizeView>

@code {
    protected override SingleRunDto CreateDto() => this._runService.StartSingleRun(this.runDto?.Color ?? EScoringButtonColor.Blue);

    protected override ScoreDto HandleScore(EScoringButtonColor color) => this.runDto.Score;

    protected override async Task<bool> HandleStartedState()
    {
        if (!this.runDto.Score.Presentation.HasValue)
        {
            await this.OpenPresentationModal(this.runDto.Color);
        }
        return true;
    }
    private string fighterName => this.runDto.Color is EScoringButtonColor.Red ? this.redName : this.blueName;

    private async Task ChangeColor()
    {
        var res = await this._modalService.ShowYesNoDialog(TextConstants.ChangeColorQuestion, this._deviceHandler.IsiOS);
        if (res is not EDialogResult.Yes) { return; }
        this.runDto = this._runService.StartSingleRun(__colorChange());

        await this.InvokeAsync(this.StateHasChanged);
    }

    private EScoringButtonColor __colorChange() => (this.runDto is null, this.runDto?.Color ?? EScoringButtonColor.None) switch
    {
        (false, EScoringButtonColor.Blue) => EScoringButtonColor.Red,
        _ => EScoringButtonColor.Blue
    };


    private async Task OpenPresentationModal(EScoringButtonColor color)
    {
        if (this.runDto.State is not ERunState.Started) { return; }
        var modalResultBlue = await this._modalService.Show<ScorePresentationModal>(TextConstants.Presentation, new ModalParameters(){
                {nameof(ScorePresentationModal.Color),color},
                {nameof(ScorePresentationModal.Dto), this.runDto.Score},
        }, new ModalOptions()
        {
            Size = ModalSize.ExtraLarge,
        }).Result;
        this.CheckPresentationScoreForNull(this.runDto.Score);
        await this.InvokeAsync(this.StateHasChanged);
    }
}
