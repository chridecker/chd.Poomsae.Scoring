@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Pages.Base
@using chd.Poomsae.Scoring.UI.Components.Shared
@using chd.Poomsae.Scoring.UI.Components.Shared.Result
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Contracts.Enum
@using System.Collections.Concurrent
@inherits BaseClientComponent
@page "/results"

<div class="result-container">
    <JudgesComponent DisconnectDevice="async (device) => await this.RemoveDevice(device)" Color="EScoringButtonColor.Red" Devices="this._connectedDevices.Values" />
    <TotalResult Color="EScoringButtonColor.Red" />
    <TotalResult Color="EScoringButtonColor.Blue" />
    <JudgesComponent DisconnectDevice="async (device) => await this.RemoveDevice(device)" Color="EScoringButtonColor.Blue" Devices="this._connectedDevices.Values" />
</div>
<FloatingActionNavigation FAIconActive="magnifying-glass-plus" TextActive="@TextConstants.AddDeviceAuto" OnClick="this.Search">
    <FloatingActionButton FAClass="magnifying-glass" Title="@TextConstants.SearchDevices" OnClick="this.Discover" />
    @if (this._connectedDevices.Any())
    {
        <FloatingActionButton FAClass="eraser" Title="@TextConstants.RemoveDevices" OnClick="this.Clear" />
        <FloatingActionButton FAClass="laptop-slash" Title="@TextConstants.RemoveDevice" OnClick="this.RemoveDevices" />
    }
</FloatingActionNavigation>


@code {
    [Inject] IResultService resultService { get; set; }

    protected override Task Clear()
    {
        this.resultService.Clear();
        return base.Clear();
    }

    protected override async Task OnResultReceived(ScoreReceivedEventArgs e)
    {
        this.resultService.SetRun(e.Device.Id, new()
        {
            ChongScore = e.Chong,
            HongScore = e.Hong
        });
        await this.InvokeAsync(this.StateHasChanged);
    }

    protected override async Task OnDeviceDisconncted(DeviceDto e)
    {
        this.resultService.Clear(e.Id);
        if (!this.resultService.Result.Results.Any())
        {
            this.resultService.Clear();
        }
        await this.InvokeAsync(this.StateHasChanged);
    }







}