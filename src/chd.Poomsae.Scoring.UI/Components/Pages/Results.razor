@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
@implements IDisposable
@page "/results"

<div class="result-container">
    <div class="total-results">
        <div class="total-result chong">
            <div class="total">@(this.resultService.ChongTotal?.ToDisplayString() ?? "-")</div>
            <div class="detail presentation">@(this.resultService.ChongAccuracy?.ToDisplayString() ?? "-")</div>
            <div class="detail accuracy">@(this.resultService.ChongPresentation?.ToDisplayString() ?? "-")</div>
        </div>
        <div class="total-result hong">
            <div class="total">@(this.resultService.HongTotal?.ToDisplayString() ?? "-")</div>
            <div class="detail presentation">@(this.resultService.HongAccuracy?.ToDisplayString() ?? "-")</div>
            <div class="detail accuracy">@(this.resultService.HongPresentation?.ToDisplayString() ?? "-")</div>
        </div>
    </div>
    <div class="judge-results">
        <div class="judge-result chong">
            @foreach (var judge in this._connectedDeviced)
            {
                <div class="judge">
                    <div class="score accuracy">@((ChongResult(judge.Key)?.Accuracy.ToDisplayString() ?? "-"))</div>
                    <div class="score presentation">@((ChongResult(judge.Key)?.Presentation.ToDisplayString() ?? "-"))</div>
                </div>
            }
        </div>
        <div class="judge-result hong">
            @foreach (var judge in this._connectedDeviced)
            {
                <div class="judge">
                    <div class="score accuracy">@((HongResult(judge.Key)?.Accuracy.ToDisplayString() ?? "-"))</div>
                    <div class="score presentation">@((HongResult(judge.Key)?.Presentation.ToDisplayString() ?? "-"))</div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject] IResultService resultService { get; set; }
    [Inject] IBroadcastClient broadcastClient { get; set; }
    [Inject] IModalService modalService { get; set; }

    private Dictionary<Guid, string> _connectedDeviced = [];

    protected override async Task OnInitializedAsync()
    {
        this.broadcastClient.ResultReceived += ResultReceived;
        this.broadcastClient.DeviceFound += DeviceFound;
        this.broadcastClient.DeviceDisconnected += DeviceDisconnect;
        await this.broadcastClient.StartScanAsync();

        await base.OnInitializedAsync();
    }

    private async void DeviceFound(object? sender, DeviceFoundEventArgs e)
    {
        this._connectedDeviced[e.Id] = e.Name;
        await this.InvokeAsync(this.StateHasChanged);
    }
    private async void DeviceDisconnect(object? sender, Guid id)
    {
        if (this._connectedDeviced.TryGetValue(id, out _))
        {
            this._connectedDeviced.Remove(id);
            await this.InvokeAsync(this.StateHasChanged);
        }
    }

    private async void ResultReceived(object? sender, ScoreReceivedEventArgs e)
    {
        this.resultService.SetRun(e.DeviceId, new()
            {
                JudgeId = e.DeviceId,
                Name = e.DeviceName,
                ChongScore = e.Chong,
                HongScore = e.Hong
            });
        await this.InvokeAsync(this.StateHasChanged);
    }
    private ScoreDto ChongResult(Guid id) => this.resultService.Result.Results.TryGetValue(id, out var res) ? res.ChongScore : null;
    private ScoreDto HongResult(Guid id) => this.resultService.Result.Results.TryGetValue(id, out var res) ? res.HongScore : null;

    public void Dispose()
    {
        this.broadcastClient.ResultReceived -= ResultReceived;
        this.broadcastClient.DeviceFound -= DeviceFound;
        this.broadcastClient.DeviceDisconnected -= DeviceDisconnect;
    }
}