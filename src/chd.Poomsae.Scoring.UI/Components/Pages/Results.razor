@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Extensions
@implements IDisposable
@page "/results"

<div class="result-container">
    <div class="total-results">
        <div class="total-result chong">
            <div class="total">9.1</div>
            <div class="detail presentation">6.0</div>
            <div class="detail accuracy">3.1</div>
        </div>
        <div class="total-result hong">
            <div class="total">9.1</div>
            <div class="detail presentation">6.0</div>
            <div class="detail accuracy">3.1</div>
        </div>
    </div>
    <div class="judge-results">
        <div class="judge-result chong">
            @foreach (var judge in this._connectedDeviced)
            {
                <div class="judge">
                    <div class="name">@judge.Value</div>
                    <div class="score accuracy">@(ChongResult(judge.Key)?.Accuracy ?? 0m).ToDisplayString()</div>
                    <div class="score presentation">@(ChongResult(judge.Key)?.Presentation ?? 0m).ToDisplayString()</div>
                </div>
            }
        </div>
        <div class="judge-result hong">
            @foreach (var judge in this._connectedDeviced)
            {
                <div class="judge">
                    <div class="name">@judge.Value</div>
                    <div class="score accuracy">@(HongResult(judge.Key)?.Accuracy ?? 0m).ToDisplayString()</div>
                    <div class="score presentation">@(HongResult(judge.Key)?.Presentation ?? 0m).ToDisplayString()</div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject] IResultService resultService { get; set; }
    [Inject] IBroadcastClient broadcastClient { get; set; }

    private Dictionary<Guid, string> _connectedDeviced = [];

    protected override async Task OnInitializedAsync()
    {
        this.broadcastClient.ResultReceived += ResultReceived;
        this.broadcastClient.DeviceFound += DeviceFound;
        await this.broadcastClient.StartScanAsync();

        await base.OnInitializedAsync();
    }

    private async void DeviceFound(object? sender, DeviceFoundEventArgs e)
    {
        this._connectedDeviced[e.Id] = e.Name;
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async void ResultReceived(object? sender, ScoreReceivedEventArgs e)
    {
        this.resultService.SetRun(e.DeviceId, new()
            {
                JudgeId = e.DeviceId,
                Name = e.DeviceName,
                ChongScore = e.Chong,
                HongScore = e.Hong
            });
        await this.InvokeAsync(this.StateHasChanged);
    }
    private ScoreDto ChongResult(Guid id) => this.resultService.Result.Results.TryGetValue(id, out var res) ? res.ChongScore : null;
    private ScoreDto HongResult(Guid id) => this.resultService.Result.Results.TryGetValue(id, out var res) ? res.HongScore : null;

    public void Dispose()
    {
        this.broadcastClient.ResultReceived -= ResultReceived;
        this.broadcastClient.DeviceFound -= DeviceFound;
    }
}