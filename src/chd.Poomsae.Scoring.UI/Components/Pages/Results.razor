@using Blazored.Modal.Services
@using chd.Poomsae.Scoring.Contracts.Dtos
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Shared.Result
@using chd.Poomsae.Scoring.UI.Extensions
@implements IDisposable
@page "/results"

<div class="result-container">
    <JudgesComponent IsRed="false" Devices="this._connectedDevices" />
    <TotalResult IsRed="false" />
    <TotalResult IsRed="true" />
    <JudgesComponent IsRed="true" Devices="this._connectedDevices" />
</div>
<FloatingActionNavigation FAIconActive="magnifying-glass-plus" TextActive="Automatisches Hinzufügen" OnClick="this.Search">
    <FloatingActionButton FAClass="magnifying-glass" Title="Erweiterte Suche" OnClick="this.Discover" />
    <FloatingActionButton FAClass="eraser" Title="Alle Löschen" OnClick="this.Clear" />
</FloatingActionNavigation>


@code {
    [Inject] IResultService resultService { get; set; }
    [Inject] IBroadcastClient broadcastClient { get; set; }
    [Inject] IModalService modalService { get; set; }

    private CancellationTokenSource _cts = new();
    private List<DeviceDto> _connectedDevices = [];

    private IModalReference _loadingModal;

    protected override async Task OnInitializedAsync()
    {
        this.broadcastClient.ResultReceived += ResultReceived;
        this.broadcastClient.DeviceFound += DeviceFound;
        this.broadcastClient.DeviceDisconnected += DeviceDisconnect;
        this.broadcastClient.ScanTimeout += this.ScanFinished;

        this._connectedDevices = await this.broadcastClient.CurrentConnectedDevices(this._cts.Token);

        await base.OnInitializedAsync();
    }

    private async Task Discover()
    {
        await this.modalService.Show<DiscoverDevices>(new ModalOptions()
            {
                Size = ModalSize.Large
            }).Result;
    }

    private async Task Search()
    {
        this._loadingModal = this.modalService.ShowLoading();
        await this.Clear();
        await this.broadcastClient.StartAutoConnectAsync(this._cts.Token);
    }

    private async Task Clear()
    {
        this.resultService.Clear();
        foreach (var device in this._connectedDevices)
        {
            await this.broadcastClient.DisconnectDeviceAsync(device.Id, this._cts.Token);
        }
        this._connectedDevices = await this.broadcastClient.CurrentConnectedDevices(this._cts.Token);
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async void ScanFinished(object? sender, EventArgs e)
    {
        if (this._loadingModal != null)
        {
            this._loadingModal.Close(ModalResult.Ok());
            this._loadingModal = null;
        }
    }

    private async void DeviceFound(object? sender, DeviceDto e)
    {
        if (this._connectedDevices.Any(a => a.Id == e.Id))
        {
            this._connectedDevices.FirstOrDefault(a => a.Id == e.Id).Name = e.Name;
        }
        else
        {
            this._connectedDevices.Add(e);
        }
        await this.InvokeAsync(this.StateHasChanged);
    }
    private async void DeviceDisconnect(object? sender, DeviceDto e)
    {
        if (this._connectedDevices.Any(a => a.Id == e.Id))
        {
            this._connectedDevices.Remove(e);
            await this.InvokeAsync(this.StateHasChanged);
        }
    }

    private async void ResultReceived(object? sender, ScoreReceivedEventArgs e)
    {
        this.resultService.SetRun(e.Device.Id, new()
            {
                ChongScore = e.Chong,
                HongScore = e.Hong
            });
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        this._cts.Cancel();
        this.broadcastClient.ResultReceived -= ResultReceived;
        this.broadcastClient.DeviceFound -= DeviceFound;
        this.broadcastClient.DeviceDisconnected -= DeviceDisconnect;
        this.broadcastClient.ScanTimeout -= this.ScanFinished;

        this._cts.Dispose();
    }
}