@inherits PageComponentBase<Guid,int>
@implements IAsyncDisposable
@using Blazored.Modal.Services
@using Blazored.Toast.Configuration
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Shared
@using chd.Poomsae.Scoring.UI.Extensions
@using chd.UI.Base.Client.Implementations.Services
@using chd.UI.Base.Contracts.Enum
@inject IScrollInfoService scrollInfoService
@inject IModalHandler modalService


<div class="page @(this.deviceHandler.IsiOS ? "ios" : "") ">
    <CascadingBackButton>
        <main class="@(this._navCollapsed ? "collapsed-nav" : "")" @onmouseover="() => this._navCollapsed = true">
            <article id="main-article" class="content px-4" @onscroll="scrollInfoService.Scrolled">
                @Body
            </article>
        </main>
    </CascadingBackButton>

</div>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                MaxToastCount="3"
                RemoveToastsOnNavigation="true"
                ShowProgressBar="true">
    <CloseButtonContent>
        <div>
            <span>&times;</span>
        </div>
    </CloseButtonContent>
</BlazoredToasts>

@code {
    private CancellationTokenSource _cts = new();

    private bool _navCollapsed = true;

    [Inject] IJSRuntime jSRuntime { get; set; }
    [Inject] IAppInfoService appInfoService { get; set; }
    [Inject] IDeviceHandler deviceHandler { get; set; }
    [Inject] IBroadCastService broadCastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.appInfoService.ExitApplication += this.ExitApplication;
        this._profileService.UserChanged += this.UserChanged;
        _ = await this._profileService.LoginAsync(new(), this._cts.Token);


        await this.broadCastService.StartAsync(this._cts.Token);
        await base.OnInitializedAsync();
    }


    [JSInvokable]
    public void OnNavigateBack() => appInfoService.BackButtonPressed?.Invoke(this, false);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await jSRuntime.InvokeVoidAsync("window.startBackListener", dotNetReference);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void ExitApplication(object? sender, bool exit)
    {
        if(!exit)
        {
            await this.deviceHandler.ShowToast(TextConstants.ExitApplicationQuestion);
            return;
        }
        this.deviceHandler.CloseApp();
    }

    private async void UserChanged(object? sender, UserDto<Guid, int> user)
    {
        if (user is PSUserDto dto)
        {
#if DEBUG
            await this.deviceHandler.ShowToast($"user:{dto.Email}");
#endif
        }
    }

    private async Task OnLabelSwiped(ESwipeDirection e)
    {
        if (e == ESwipeDirection.LeftToRight)
        {
            this._navCollapsed = false;
            await this.InvokeAsync(this.StateHasChanged);
        }
    }
    public async ValueTask DisposeAsync()
    {
        this.appInfoService.ExitApplication -= this.ExitApplication;
        this._profileService.UserChanged -= this.UserChanged;
        await this._profileService.LogoutAsync(this._cts.Token);
        this._cts.Cancel();
    }
}