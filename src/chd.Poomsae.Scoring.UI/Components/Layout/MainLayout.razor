@inherits PageComponentBase<Guid,int>
@implements IAsyncDisposable
@using Blazored.Modal.Services
@using Blazored.Toast.Configuration
@using chd.Poomsae.Scoring.Contracts.Interfaces
@using chd.Poomsae.Scoring.UI.Components.Shared
@using chd.UI.Base.Client.Implementations.Services
@using chd.UI.Base.Contracts.Enum
@inject IScrollInfoService scrollInfoService
@inject IModalService modalService


<div class="page">
    <CascadingBackButton>
        @if (!this.deviceHandler.IsiOS)
        {
            <SwipeArea PixelToSwipe="10" OnSwipe="this.OnLabelSwiped">
                <div class="sidebar-hover-toggle @(this._navCollapsed ? "auto-collapse" : "")" @onmouseover="() => this._navCollapsed = false">
            </div>
        </SwipeArea>

        <NavMenu Visible="!(this._navCollapsed)" />
        }
        <main class="@(this._navCollapsed ? "collapsed-nav" : "")" @onmouseover="() => this._navCollapsed = true">
            <article id="main-article" class="content px-4" @onscroll="scrollInfoService.Scrolled">
                @Body
            </article>
        </main>
    </CascadingBackButton>

</div>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                MaxToastCount="3"
                RemoveToastsOnNavigation="true"
                ShowProgressBar="true">
    <CloseButtonContent>
        <div>
            <span>&times;</span>
        </div>
    </CloseButtonContent>
</BlazoredToasts>

@code {
    private CancellationTokenSource _cts = new();

    private bool _navCollapsed = true;


    [Inject] IDeviceHandler deviceHandler { get; set; }
    [Inject] IBroadCastService broadCastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this._profileService.UserChanged += this.UserChanged;
        _ = await this._profileService.LoginAsync(new(), this._cts.Token);


        await this.broadCastService.StartAsync(this._cts.Token);
        await base.OnInitializedAsync();
    }


    private async void UserChanged(object? sender, UserDto<Guid, int> user)
    {
        if (user is PSUserDto dto)
        {
#if DEBUG
            await this.modalService.ShowDialog($"user:{dto.Email}", EDialogButtons.OK);
#endif
        }
    }

    private async Task OnLabelSwiped(ESwipeDirection e)
    {
        if (e == ESwipeDirection.LeftToRight)
        {
            this._navCollapsed = false;
            await this.InvokeAsync(this.StateHasChanged);
        }
    }
    public async ValueTask DisposeAsync()
    {
        this._profileService.UserChanged -= this.UserChanged;
        await this._profileService.LogoutAsync(this._cts.Token);
        this._cts.Cancel();
    }
}